CHIP Muxoperations8
{
	IN a[8], b[8],x[8],y[8], sums, ands, xors, ors;
	OUT out[8];

PARTS:

And(a=a[0],b=sums,out=outa);
And(a=b[0],b=ands,out=outb);
And(a=x[0],b=xors,out=outx);
And(a=y[0],b=ors,out=outy);

Or(a=outa,b=outb,out=check1);
Or(a=outx,b=check1,out=check2);
Or(a=outy,b=check2,out=out[0]);

And(a=a[1],b=sums,out=outa1);
And(a=b[1],b=ands,out=outb1);
And(a=x[1],b=xors,out=outx1);
And(a=y[1],b=ors,out=outy1);

Or(a=outa1,b=outb1,out=check11);
Or(a=outx1,b=check11,out=check21);
Or(a=outy1,b=check21,out=out[1]);

And(a=a[2],b=sums,out=outa2);
And(a=b[2],b=ands,out=outb2);
And(a=x[2],b=xors,out=outx2);
And(a=y[2],b=ors,out=outy2);

Or(a=outa2,b=outb2,out=check12);
Or(a=outx2,b=check12,out=check22);
Or(a=outy2,b=check22,out=out[2]);

And(a=a[3],b=sums,out=outa3);
And(a=b[3],b=ands,out=outb3);
And(a=x[3],b=xors,out=outx3);
And(a=y[3],b=ors,out=outy3);

Or(a=outa3,b=outb3,out=check13);
Or(a=outx3,b=check13,out=check23);
Or(a=outy3,b=check23,out=out[3]);

And(a=a[4],b=sums,out=outa4);
And(a=b[4],b=ands,out=outb4);
And(a=x[4],b=xors,out=outx4);
And(a=y[4],b=ors,out=outy4);

Or(a=outa4,b=outb4,out=check14);
Or(a=outx4,b=check14,out=check24);
Or(a=outy4,b=check24,out=out[4]);

And(a=a[5],b=sums,out=outa5);
And(a=b[5],b=ands,out=outb5);
And(a=x[5],b=xors,out=outx5);
And(a=y[5],b=ors,out=outy5);

Or(a=outa5,b=outb5,out=check15);
Or(a=outx5,b=check15,out=check25);
Or(a=outy5,b=check25,out=out[5]);

And(a=a[6],b=sums,out=outa6);
And(a=b[6],b=ands,out=outb6);
And(a=x[6],b=xors,out=outx6);
And(a=y[6],b=ors,out=outy6);

Or(a=outa6,b=outb6,out=check16);
Or(a=outx6,b=check16,out=check26);
Or(a=outy6,b=check26,out=out[6]);

And(a=a[7],b=sums,out=outa7);
And(a=b[7],b=ands,out=outb7);
And(a=x[7],b=xors,out=outx7);
And(a=y[7],b=ors,out=outy7);

Or(a=outa7,b=outb7,out=check17);
Or(a=outx7,b=check17,out=check27);
Or(a=outy7,b=check27,out=out[7]);

}
