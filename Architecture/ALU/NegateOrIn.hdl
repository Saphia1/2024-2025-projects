CHIP NegateOrIn
{
	IN in[8], z;
	OUT out[8];
PARTS:	
Nand(a=z,b=z,out=notz);
Nand(a=in[0],b=in[0], out=invertin);
And(a=in[0],b=notz,out=c);
And(a=invertin,b=z,out=d);
Or(a=c,b=d,out=out[0]); 

Nand(a=z,b=z,out=notz1);
Nand(a=in[1],b=in[1], out=invertin1);
And(a=in[1],b=notz1,out=c1);
And(a=invertin1,b=z,out=d1);
Or(a=c1,b=d1,out=out[1]); 

Nand(a=z,b=z,out=notz2);
Nand(a=in[2],b=in[2], out=invertin2);
And(a=in[2],b=notz2,out=c2);
And(a=invertin2,b=z,out=d2);
Or(a=c2,b=d2,out=out[2]); 

Nand(a=z,b=z,out=notz3);
Nand(a=in[3],b=in[3], out=invertin3);
And(a=in[3],b=notz3,out=c3);
And(a=invertin3,b=z,out=d3);
Or(a=c3,b=d3,out=out[3]); 

Nand(a=z,b=z,out=notz4);
Nand(a=in[4],b=in[4], out=invertin4);
And(a=in[4],b=notz4,out=c4);
And(a=invertin4,b=z,out=d4);
Or(a=c4,b=d4,out=out[4]); 

Nand(a=z,b=z,out=notz5);
Nand(a=in[5],b=in[5], out=invertin5);
And(a=in[5],b=notz5,out=c5);
And(a=invertin5,b=z,out=d5);
Or(a=c5,b=d5,out=out[5]); 

Nand(a=z,b=z,out=notz6);
Nand(a=in[6],b=in[6], out=invertin6);
And(a=in[6],b=notz6,out=c6);
And(a=invertin6,b=z,out=d6);
Or(a=c6,b=d6,out=out[6]); 

Nand(a=z,b=z,out=notz7);
Nand(a=in[7],b=in[7], out=invertin7);
And(a=in[7],b=notz7,out=c7);
And(a=invertin7,b=z,out=d7);
Or(a=c7,b=d7,out=out[7]); 


	

}
