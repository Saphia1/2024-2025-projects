CHIP ZeroOrIn
{
	IN in[8], z;
	OUT out[8];
PARTS:
Nand(a=z,b=z,out=notz);
And(a=z,b=notz, out=setzero);
And(a=in[0],b=notz,out=c);
And(a=setzero,b=z,out=d);
Or(a=c,b=d,out=out[0]); 

Nand(a=z,b=z,out=notz1);
And(a=z,b=notz1, out=setzero1);
And(a=in[1],b=notz1,out=c1);
And(a=setzero1,b=z,out=d1);
Or(a=c1,b=d1,out=out[1]); 

Nand(a=z,b=z,out=notz2);
And(a=z,b=notz2, out=setzero2);
And(a=in[2],b=notz2,out=c2);
And(a=setzero2,b=z,out=d2);
Or(a=c2,b=d2,out=out[2]); 

Nand(a=z,b=z,out=notz3);
And(a=z,b=notz3, out=setzero3);
And(a=in[3],b=notz3,out=c3);
And(a=setzero3,b=z,out=d3);
Or(a=c3,b=d3,out=out[3]); 

Nand(a=z,b=z,out=notz4);
And(a=z,b=notz4, out=setzero4);
And(a=in[4],b=notz4,out=c4);
And(a=setzero4,b=z,out=d4);
Or(a=c4,b=d4,out=out[4]); 

Nand(a=z,b=z,out=notz5);
And(a=z,b=notz5, out=setzero5);
And(a=in[5],b=notz5,out=c5);
And(a=setzero5,b=z,out=d5);
Or(a=c5,b=d5,out=out[5]); 

Nand(a=z,b=z,out=notz6);
And(a=z,b=notz6, out=setzero6);
And(a=in[6],b=notz6,out=c6);
And(a=setzero6,b=z,out=d6);
Or(a=c6,b=d6,out=out[6]); 

Nand(a=z,b=z,out=notz7);
And(a=z,b=notz7, out=setzero7);
And(a=in[7],b=notz7,out=c7);
And(a=setzero7,b=z,out=d7);
Or(a=c7,b=d7,out=out[7]); 


	
}
